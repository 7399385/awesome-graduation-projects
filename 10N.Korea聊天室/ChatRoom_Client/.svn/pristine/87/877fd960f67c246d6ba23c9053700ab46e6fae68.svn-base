package com.sxt.serice;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Date;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.plaf.LabelUI;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import com.sxt.request.Communication;
import com.sxt.request.StartApp;
import com.sxt.swing.OneChatPanel;
import com.sxt.swing.SigleChatSwing;
import com.sxt.util.FontAndText;
import com.sxt.vo.TransMsg;
import com.sxt.vo.Users;
import com.sxt.windows.ChatPic;
import com.sxt.windows.CoolToolTip;

/**
 * 单聊用户鼠标点击事件
 * @author Administrator
 */
public class SigleChatOperate implements MouseListener,ActionListener{
	private static SigleChatSwing sigleChatSwing;	
	private JComboBox fontStyle;
	private JComboBox fontSize;
	private JComboBox fontColor;
	private boolean flag = true;
	private Users users=null; //当前聊天对象
	
	public SigleChatSwing getSigleChatSwing() {
		return sigleChatSwing;
	}


	public void setSigleChatSwing(SigleChatSwing sigleChatSwing) {
		this.sigleChatSwing = sigleChatSwing;
	}


	public SigleChatOperate(Users users) {
		sigleChatSwing=new SigleChatSwing();
		sigleChatSwing.addMouseListener(this);
		sigleChatSwing.getSendText().addMouseListener(this);
		sigleChatSwing.getSendButton().addActionListener(this);
		sigleChatSwing.getTextPane().addMouseListener(this);
		sigleChatSwing.getEmojiButton().addMouseListener(this);
		sigleChatSwing.getFontButton().addActionListener(this);
		sigleChatSwing.getFriendMsgLabel().setText(users.getName());
		this.users=users;
//		Thread thread=new Thread(this);
//		this.run();
	}


	@Override
	public void mouseClicked(MouseEvent arg0) {
		
	}


	@Override
	public void mouseEntered(MouseEvent arg0) {
		
	}


	@Override
	public void mouseExited(MouseEvent arg0) {
		
	}


	@Override
	public void mousePressed(MouseEvent arg0) {
		sigleChatSwing.getPicsJWindow().setVisible(false);
	}


	@Override
	public void mouseReleased(MouseEvent arg0) {
		if (arg0.getButton()!=1) {//不是左键
			return; 
		}
		JComponent source =null;
		try {
			source= (JComponent) arg0.getSource();
		} catch (ClassCastException e) {
			return;
		}
		if (arg0.getX() >= 0 && arg0.getX() <= source.getWidth() && arg0.getY() >= 0
				&& arg0.getY() <= source.getHeight()){
			if (source.equals(sigleChatSwing.getEmojiButton())) {
				sigleChatSwing.getPicsJWindow().setVisible(true);
				sigleChatSwing.getPicsJWindow().setLocation(400,500);
			}
		}
	}
	
	class PicInfo{
		/* 图片信息*/
		int pos;
		String val;
		public PicInfo(int pos,String val){
			this.pos = pos;
			this.val = val;
		}
		public int getPos() {
			return pos;
		}
		public void setPos(int pos) {
			this.pos = pos;
		}
		public String getVal() {
			return val;
		}
		public void setVal(String val) {
			this.val = val;
		}
		
	}

	/**
	 * 在私聊天页面上画出font设置框
	 * @param fontColor 
	 */
	public void setFontWindow() {
		sigleChatSwing.getMessagePane().setBounds(0, 70, 978, 368);
		fontStyle = new JComboBox();
		fontStyle.setBackground(new Color(40, 96, 144));
		fontStyle.setFont(new Font("微软雅黑 Light", Font.PLAIN, 20));
		fontStyle.setModel(new DefaultComboBoxModel(new String[] { "字体样式", "微软雅黑 Light", "宋体", "楷体", "仿宋", "华文隶书", "黑体" }));

		fontStyle.setBounds(20, 440, 131, 43);
		sigleChatSwing.getContentPane().add(fontStyle);
		fontSize = new JComboBox();
		fontSize.setBackground(new Color(40, 96, 144));
		fontSize.setFont(new Font("微软雅黑 Light", Font.PLAIN, 20));

		fontSize.setModel(new DefaultComboBoxModel(new String[] { "字体大小", "14", "16", "18", "20", "22", "24", "26", "28" }));
		fontSize.setBounds(180, 440, 131, 43);
		sigleChatSwing.getContentPane().add(fontSize);
		
		fontColor= new JComboBox();
		fontColor.setBackground(new Color(40, 96, 144));
		fontColor.setFont(new Font("微软雅黑 Light", Font.PLAIN, 20));
		fontColor.setModel(new DefaultComboBoxModel(new String[] {"字体颜色","黑色", "红色", "黄色","绿色","蓝色"}));
		fontColor.setBounds(340, 440, 131, 43);
		sigleChatSwing.getContentPane().add(fontColor);
	}


	@Override
	public void actionPerformed(ActionEvent arg0) {
		if (arg0.getSource().equals(sigleChatSwing.getFontButton())) {
			if (flag) {
				setFontWindow();
				fontStyle.addActionListener(this);
				fontSize.addActionListener(this);
				flag = false;
			} else {
				sigleChatSwing.getMessagePane().setBounds(0, 70, 978, 418);
				flag = true;
			}
		}
		if (arg0.getSource().equals(sigleChatSwing.getSendButton())) {
			Communication c=new Communication();
			ArrayList<Users> usersList=new ArrayList<>();
			usersList.add(StartApp.getList().get(0));
			usersList.add(users);
			c.sender(new TransMsg("SigleChat",usersList,sendMsg()));
			sigleChatSwing.getSendText().setText(null);
		}
		
	}
	
	private List<PicInfo> receivdPicInfo = new LinkedList<PicInfo>();
	private List<PicInfo> myPicInfo = new LinkedList<PicInfo>();
	/*
	 * 重组收到的表情信息串
	 */
	public void receivedPicInfo(String picInfos){
		String[] infos = picInfos.split("[+]");
		for(int i = 0 ; i < infos.length ; i++){
			String[] tem = infos[i].split("[&]");
			if(tem.length==2){
				PicInfo pic = new PicInfo(Integer.parseInt(tem[0]),tem[1]);
				receivdPicInfo.add(pic);
			}
		}
	}
	
	/**
	 * 重组发送的表情信息
	 * @return 重组后的信息串  格式为   位置|代号+位置|代号+……
	 */
	private String buildPicInfo(){
		StringBuilder sb = new StringBuilder("");
		StyledDocument docMsg = sigleChatSwing.getSendText().getStyledDocument();
		//遍历jtextpane找出所有的图片信息封装成指定格式
		  for(int i = 0; i <sigleChatSwing.getSendText().getText().length(); i++){ 
//			  if(mainRoomSwing.getSendMessage().getCh){
              if(docMsg.getCharacterElement(i).getName().equals("icon")){
            	  //ChatPic = (ChatPic)
            	  Icon icon = StyleConstants.getIcon(sigleChatSwing.getSendText().getStyledDocument().getCharacterElement(i).getAttributes());
            	  ImageIcon icon2=(ImageIcon) icon;
            	  System.out.println(icon2);
            	  ChatPic cupic = (ChatPic)icon;
            	  PicInfo picInfo= new PicInfo(i,cupic.getIm()+"");
            	  myPicInfo.add(picInfo);
            	  sb.append(i+"&"+cupic.getIm()+"+");
             } 
          }
		  System.out.println(sb.toString());
		  return sb.toString();
		 
	}
	
	 /* 错误信息气泡提示*/
	private CoolToolTip error_tip;
	
	/**
	 * 发送消息
	 */
	private FontAndText myFont = null;
	public String sendMsg() {
		String message =sigleChatSwing.getSendText().getText();
		if (message.length() == 0) {
			error_tip.setText("请输入聊天信息！");
			error_tip.setVisible(true);
			return "";
		}
		if(message.length()>100){
			error_tip.setText("消息最多一百个字符！你要发送的为"+message.length() + "个字符！");
			error_tip.setVisible(true);
			return "";
		}
		
		myFont = getFontAttrib();
		
		return myFont.toString();
	}
	
	/**
	 * 获取所需要的文字设置
	 * 
	 * @return FontAttrib
	 */
	private FontAndText getFontAttrib() {
		FontAndText att = new FontAndText();
		att.setText(sigleChatSwing.getSendText().getText()+"*"+buildPicInfo());//文本和表情信息

		
		System.out.println("获取所需要的文字设置："+att.toString());
		return att;
	}
	
//	
//	@Override
//	public void run() {
////		Communication communication = new Communication();
//		while (true) {
//			try {
//				Thread.sleep(500);
//			} catch (InterruptedException e) {
//				e.printStackTrace();
//			}
////			communication.listener();
//			List<TransMsg> list = (List<TransMsg>) Communication.getList();
//		
//			java.util.Iterator<TransMsg> iterator = list.iterator();
//			while (iterator.hasNext()) {
//				TransMsg transMsg = (TransMsg) iterator.next();
//				if (transMsg.getFunction().equals("SigleChat")) {
//					ArrayList<Users> usersList=(ArrayList<Users>) transMsg.getMsg();
//					Users self=usersList.get(1);
//					Users sender=usersList.get(0);
//					if (self.equals(LoginOperate.getSelf())) {
//						String message = transMsg.getContent();
//						long time = System.currentTimeMillis();
//						Date date = new Date(time);
//						sigleChatSwing.getTextPane().setVisible(false);
//						sigleChatSwing.getTextPane().add(new OneChatPanel(sender, message).getPanel());
//						sigleChatSwing.getTextPane().setVisible(true);
//						JScrollPane scrollPane = sigleChatSwing.getMessagePane();
//						JScrollBar bar = scrollPane.getVerticalScrollBar();
//						bar.setValue(bar.getMaximum());
//						iterator.remove();
//					}
//					
//				}
//			}
//
//		}
//
//	}

}
