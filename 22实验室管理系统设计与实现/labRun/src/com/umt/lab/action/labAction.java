/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.umt.lab.action;

import java.io.IOException;
import java.sql.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.umt.lab.dao.labDao;
import com.umt.lab.form.labForm;
import com.umt.lab.vo.labVo;

/** 
 * MyEclipse Struts
 * Creation date: 05-06-2009
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class labAction extends DispatchAction {

	/**
	 * 登陆
	 */
	String forward = "";
	List list = null;
	labDao dao = null;
	HttpSession session = null;

	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");

		labForm labform = (labForm) form;
		String username = labform.getUsername().trim();
		String userpwd = labform.getUserpwd().trim();
		labDao dao = new labDao();
		boolean b = dao.Searchname(username,userpwd);
		if (b) {

			forward = "labMain";
		} else {
			forward = "login";
		}

		return mapping.findForward(forward);
	}

	/**
	 * 查询所有实验记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward SeachAllLab(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");
		labDao dao = new labDao();
		List list = dao.SearchAll();
		//把信息放到request中页面信息只能执行一次，放到session中的信息对所有页面信息
		session = request.getSession();
		session.setAttribute("allemp", list);
		return mapping.findForward("empManager");
	}

	/**
	 * 添加分组实验记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");

		String lore = labform.getLore().trim();
		String labclass = labform.getLabclass().trim();
		String labname = labform.getLabname().trim();
		Date labDate = labform.getLabDate();
		int kts = labform.getKts();
		int team = labform.getTeam();
		String teacher = labform.getTeacher().trim();

		labDao dao = new labDao();

		dao.labInsert(new labVo(lore, labclass, labname, labDate, kts, team,
				teacher));
		List list = dao.SearchAll();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("empManager");
	}

	/**
	 * 修改分组实验记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward toupdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		labDao dao = new labDao();
		labVo vo = dao.SearchByKey2(Integer.valueOf(
				request.getParameter("currentEmp")).intValue());
		//将vo中的值放到simpleemp中
		request.setAttribute("simpleemp", vo);
		return mapping.findForward("toupdate");
	}

	/**
	 * 将修改好的信息插入进去
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");

		int id = labform.getId();
		String lore = labform.getLore().trim();
		String labclass = labform.getLabclass().trim();
		String labname = labform.getLabname().trim();
		Date labDate = labform.getLabDate();
		int kts = labform.getKts();
		int team = labform.getTeam();
		String teacher = labform.getTeacher().trim();

		labDao dao = new labDao();

		dao.labUpdate(new labVo(id, lore, labclass, labname, labDate, kts,
				team, teacher));
		List list = dao.SearchAll();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("update");
	}

	/**
	 * 删除
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		labDao dao = new labDao();
		//将currentemp中的信息也就是点击修改后他的ID给id
		int id = Integer.valueOf(request.getParameter("currentEmp").trim());
		dao.labDelete(id);
		List list = dao.SearchAll();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("empManager");

	}

	/**
	 * 模糊查询实验记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward seach(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		labForm labform = (labForm) form;

		StringBuffer sqlSearchBySql = new StringBuffer(
				"select * from lab1_peng  where ");
		String labclass = labform.getLabclass().trim();
		String teacher = labform.getTeacher().trim();
		if (!labclass.equals("")) {
			sqlSearchBySql.append("labclass like '%" + labclass + "%' and  ");
		}
		if (!teacher.equals("")) {
			sqlSearchBySql.append("teacher like '%" + teacher + "%' and  ");
		}

		String sqlSearchBySqlFinal = new String(sqlSearchBySql);

		sqlSearchBySqlFinal = sqlSearchBySqlFinal.substring(0,
				sqlSearchBySqlFinal.length() - 6);

		labDao dao = new labDao();
		List list = dao.SearchempInfo(sqlSearchBySqlFinal);

		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("empManager");
	}

	/**
	 * 查询所有的最新实验
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward labAllSeach(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		labDao dao = new labDao();
		List list = dao.labIssUe();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);
		return mapping.findForward("labInformManager");
	}

	/**
	 * 添加分组实验记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward insert2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");

		String labname = labform.getLabname().trim();
		String labtype = labform.getLabtype();
		int team = labform.getTeam();
		Date labDate = labform.getLabDate();
		int kts = labform.getKts();
		String labclass = labform.getLabclass().trim();
		String teacher = labform.getTeacher().trim();

		labDao dao = new labDao();

		dao.labNewInsert(new labVo(labname, labtype, team, labDate, kts,
				labclass, teacher));
		List list = dao.labIssUe();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labInformManager");
	}

	/**
	 * 修改最新实验信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward toupdate2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		labDao dao = new labDao();
		labVo vo = dao.SearchByKey3(Integer.valueOf(
				request.getParameter("currentEmp")).intValue());
		//将vo中的值放到simpleemp中
		request.setAttribute("simpleemp", vo);
		return mapping.findForward("toupdate2");
	}

	/**
	 * 将修改好的最新实验信息插入到数据库中
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward update2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");

		int id = labform.getId();
		String labname = labform.getLabname().trim();
		String labtype = labform.getLabtype();
		int team = labform.getTeam();
		Date labDate = labform.getLabDate();
		int kts = labform.getKts();
		String labclass = labform.getLabclass().trim();
		String teacher = labform.getTeacher().trim();

		labDao dao = new labDao();

		dao.labNewUpdate(new labVo(id, labname, labtype, team, labDate, kts,
				labclass, teacher));
		List list = dao.labIssUe();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labInformManager");
	}

	/**
	 * 删除最新的实验信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward delete2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		labDao dao = new labDao();
		//将currentemp中的信息也就是点击修改后他的ID给id
		int id = Integer.valueOf(request.getParameter("currentEmp").trim());
		dao.labNewDelete(id);
		List list = dao.labIssUe();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labInformManager");

	}

	/**
	 * 模糊查询最新实验信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward seach2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		labForm labform = (labForm) form;

		StringBuffer sqlSearchBySql = new StringBuffer(
				"select * from lab2_peng  where ");
		String labname = labform.getLabname().trim();
		String teacher = labform.getTeacher().trim();
		if (!labname.equals("")) {
			sqlSearchBySql.append("labname like '%" + labname + "%' and  ");
		}
		if (!teacher.equals("")) {
			sqlSearchBySql.append("teacher like '%" + teacher + "%' and  ");
		}

		String sqlSearchBySqlFinal = new String(sqlSearchBySql);

		sqlSearchBySqlFinal = sqlSearchBySqlFinal.substring(0,
				sqlSearchBySqlFinal.length() - 6);

		labDao dao = new labDao();
		List list = dao.SearchempInfo2(sqlSearchBySqlFinal);

		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labInformManager");
	}

	/**
	 * 查询所有演示实验信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward SeachAllDemo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");
		labDao dao = new labDao();
		List list = dao.labAllDemo();
		//把信息放到request中页面信息只能执行一次，放到session中的信息对所有页面信息
		session = request.getSession();
		session.setAttribute("allemp", list);
		return mapping.findForward("labDemoManager");
	}

	/**
	 * 添加演示实验信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward insert3(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");
		labForm labform = (labForm) form;

		int id = labform.getId();
		String teacher = labform.getTeacher().trim();
		String lore = labform.getLore().trim();
		String labclass = labform.getLabclass().trim();
		String labname = labform.getLabname().trim();
		Date labDate = labform.getLabDate();

		labDao dao = new labDao();
		dao.labInsertDemo(new labVo(id, teacher, lore, labclass, labname,
				labDate));
		List list = dao.labAllDemo();
		session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labDemoManager");
	}

	/**
	 * 修改演示实验信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward toupdate3(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		labDao dao = new labDao();
		labVo vo = dao.SearchByKey4(Integer.valueOf(
				request.getParameter("currentEmp")).intValue());
		//将vo中的值放到simpleemp中
		request.setAttribute("simpleemp", vo);
		return mapping.findForward("toupdate3");
	}

	/**
	 * 将修改好的演示实验信息插入到数据库中
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward update3(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");

		int id = labform.getId();
		String teacher = labform.getTeacher().trim();
		String lore = labform.getLore();
		String labclass = labform.getLabclass().trim();
		String labname = labform.getLabname().trim();
		Date labDate = labform.getLabDate();
		labDao dao = new labDao();

		dao.labDemoUpdate(new labVo(id, teacher, lore, labclass, labname,
				labDate));
		List list = dao.labAllDemo();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labDemoManager");
	}

	/**
	 * 删除演示实验信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward delete3(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		labDao dao = new labDao();
		//将currentemp中的信息也就是点击修改后他的ID给id
		int id = Integer.valueOf(request.getParameter("currentEmp").trim());
		dao.labDemoDelete(id);
		List list = dao.labAllDemo();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labDemoManager");

	}

	/**
	 * 模糊查询演示实验记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward seach3(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		labForm labform = (labForm) form;

		StringBuffer sqlSearchBySql = new StringBuffer(
				"select * from lab3_peng  where ");
		String lore = labform.getLore().trim();
		String teacher = labform.getTeacher().trim();
		if (!lore.equals("")) {
			sqlSearchBySql.append("lore like '%" + lore + "%' and  ");
		}
		if (!teacher.equals("")) {
			sqlSearchBySql.append("teacher like '%" + teacher + "%' and  ");
		}

		String sqlSearchBySqlFinal = new String(sqlSearchBySql);

		sqlSearchBySqlFinal = sqlSearchBySqlFinal.substring(0,
				sqlSearchBySqlFinal.length() - 6);

		labDao dao = new labDao();
		List list = dao.SearchempInfo3(sqlSearchBySqlFinal);

		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labDemoManager");
	}

	/**
	 * 查询所有物品借还信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward SeachArticle(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		labDao dao = new labDao();
		List list = dao.labAllArticle();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labBorrowManager");
	}

	/**
	 * 添加物品借还信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward insert4(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		labForm labform = (labForm) form;

		int id = labform.getId();
		Date borrowdate = labform.getBorrowdate();
		String borrowname = labform.getArticlename().trim();
		String articlename = labform.getArticlename().trim();
		String model = labform.getModel().trim();
		int borrowlist = labform.getBorrowlist();
		Date returndate = labform.getReturndate();
		int returnlist = labform.getReturnlist();
		String returnpeople = labform.getReturnpeople().trim();
		int returnno = labform.getReturnno();

		labDao dao = new labDao();
		dao.labInsertArticle(new labVo(id, borrowdate, borrowname, articlename,
				model, borrowlist, returndate, returnlist, returnpeople,
				returnno));
		List list = dao.labAllArticle();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);
		return mapping.findForward("labBorrowManager");
	}
	
	/**
	 * 修改物品借还信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward toupdate4(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		labDao dao = new labDao();
		labVo vo = dao.SearchByKey5(Integer.valueOf(request.getParameter("currentEmp")).intValue());
		//将vo中的值放到simpleemp中
		request.setAttribute("simpleemp", vo);
		return mapping.findForward("toupdate4");
	}

	/**
	 * 将修改好的物品借还信息插入到数据库中
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward update4(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");

		int id = labform.getId();
		Date borrowdate = labform.getBorrowdate();
		String borrowname = labform.getArticlename().trim();
		String articlename = labform.getArticlename().trim();
		String model = labform.getModel().trim();
		int borrowlist = labform.getBorrowlist();
		Date returndate = labform.getReturndate();
		int returnlist = labform.getReturnlist();
		String returnpeople = labform.getReturnpeople().trim();
		int returnno = labform.getReturnno();
		labDao dao = new labDao();

		dao.labUpdateArticle(new labVo( id,  borrowdate,borrowname,
				articlename, model,  borrowlist, returndate,
				 returnlist, returnpeople,  returnno));
		List list = dao.labAllArticle();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labBorrowManager");
	}

	/**
	 * 删除物品借还信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward delete4(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		labForm labform = (labForm) form;
		labDao dao = new labDao();
		//将currentemp中的信息也就是点击修改后他的ID给id
		int id = Integer.valueOf(request.getParameter("currentEmp").trim());
		dao.labDeleteArticle(id);
		List list = dao.labAllArticle();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labBorrowManager");

	}

	/**
	 * 模糊查询物品借还记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward seach4(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		labForm labform = (labForm) form;

		StringBuffer sqlSearchBySql = new StringBuffer(
				"select * from lab4_peng  where ");
		String borrowname = labform.getBorrowname().trim();
		String model = labform.getModel().trim();
		if (!borrowname.equals("")) {
			sqlSearchBySql.append("borrowname like '%" + borrowname + "%' and  ");
		}
		if (!model.equals("")) {
			sqlSearchBySql.append("model like '%" + model + "%' and  ");
		}

		String sqlSearchBySqlFinal = new String(sqlSearchBySql);

		sqlSearchBySqlFinal = sqlSearchBySqlFinal.substring(0,
				sqlSearchBySqlFinal.length() - 6);

		labDao dao = new labDao();
		List list = dao.SearchempInfo4(sqlSearchBySqlFinal);

		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labBorrowManager");
	}
	
	/**
	 * 查询所有用户信息信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */

	public ActionForward SeachAllPeople(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");
		labDao dao = new labDao();
		List list = dao.SeachAllPeople();
		//把信息放到request中页面信息只能执行一次，放到session中的信息对所有页面信息
		session = request.getSession();
		session.setAttribute("allemp", list);
		return mapping.findForward("labPeopleManager");
	}
	
	/**
	 * 添加用户信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward insert5(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");
		labForm labform = (labForm) form;
		
	
		int studentno =labform.getStudentno();
		String studentname=labform.getStudentname();
		String sax=labform.getSax();
		Date borndate=labform.getBorndate();
		int age=labform.getAge();
		String classname=labform.getClassname();
		String username=labform.getUsername();
		String userpwd=labform.getUserpwd();
		String labname=labform.getLabname();
		int fraction=labform.getFraction();
		
		
		labDao dao = new labDao();
		dao.InsertPeople(new labVo( studentno,studentname, sax,borndate,  age,  classname,  username,
				         userpwd, labname, fraction));
		List list = dao.SeachAllPeople();
		session = request.getSession();
		session.setAttribute("allemp", list);

		return mapping.findForward("labPeopleManager");
	}
	
	/**
	 * 修改用户信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward toupdate5(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");
	    labDao dao =new labDao();
	    labVo vo=dao.SearchByKey6(Integer.valueOf(request.getParameter("currentEmp")).intValue());
	    request.setAttribute("simpleemp", vo);
		return mapping.findForward("toupdate5");
	}	
	
	/**
	 * 将修改好的用户信息放入到数据库中
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */
	public ActionForward update5(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");
	    labForm labform=(labForm)form;
		labDao dao =new labDao();
	    
		int studentno =labform.getStudentno();
		String studentname=labform.getStudentname();
		String sax=labform.getSax();
		Date borndate=labform.getBorndate();
		int age=labform.getAge();
		String classname=labform.getClassname();
		String username=labform.getUsername();
		String userpwd=labform.getUserpwd();
		String labname=labform.getLabname();
		int fraction=labform.getFraction();
		
		dao.UpdatePeople(new labVo( studentno,studentname, sax,borndate,  age,  classname,  username,
		         userpwd, labname, fraction));
        List list = dao.SeachAllPeople();
        session = request.getSession();
        session.setAttribute("allemp", list);
	
	    return mapping.findForward("labPeopleManager");
	}	
	/**
	 * 删除用户信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ServletException
	 * @throws IOException
	 */	public ActionForward delete5(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");//避免中文乱码
		response.setCharacterEncoding("utf-8");
		labDao dao=new labDao();
		dao.DeletePeople(Integer.valueOf(request.getParameter("currentEmp")).intValue());
		List list =dao.SeachAllPeople();
		HttpSession session = request.getSession();
		session.setAttribute("allemp", list);
		 return mapping.findForward("labPeopleManager");
	 }
	 
	 
	 
	 /**
		 * 模糊查询用户信息
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 * @throws ServletException
		 * @throws IOException
		 */
		public ActionForward seach5(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws ServletException, IOException {
			request.setCharacterEncoding("utf-8");
			response.setCharacterEncoding("utf-8");
			labForm labform = (labForm) form;

			StringBuffer sqlSearchBySql = new StringBuffer(
					"select * from lab5_peng  where ");
			String studentname = labform.getStudentname().trim();
			int studentno = labform.getStudentno();
			if (!studentname.equals("")) {
				sqlSearchBySql.append("studentname like '%" + studentname + "%' and  ");
			}
			if (studentno>0) {
				sqlSearchBySql.append("studentno like '%" + studentno + "%' and  ");
			}

			String sqlSearchBySqlFinal = new String(sqlSearchBySql);

			sqlSearchBySqlFinal = sqlSearchBySqlFinal.substring(0,
					sqlSearchBySqlFinal.length() - 6);

			labDao dao = new labDao();
			List list = dao.SearchempInfo5(sqlSearchBySqlFinal);

			HttpSession session = request.getSession();
			session.setAttribute("allemp", list);

			return mapping.findForward("labPeopleManager");
		}
	 
	 
}