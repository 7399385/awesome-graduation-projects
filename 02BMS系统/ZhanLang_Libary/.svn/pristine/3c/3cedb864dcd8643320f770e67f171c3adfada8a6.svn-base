package zhanlang.service.operate;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Date;

import zhanlang.entity.Book;
import zhanlang.entity.Person;
import zhanlang.service.Dao.Imple.LibServerDAOimple;



public class ListenThread implements Runnable{
	private Socket socket;
	
	public ListenThread(Socket socket) {
		super();
		this.socket = socket;
	}
	/**
	 * 用来处理每个用户,每个用户一个线程
	 */
	@Override
	public void run() {
		Person person = new Person();
		int i=1;
		InputStream is=null;
		OutputStream os=null;
		Date date=new Date();
		try {
			is=this.socket.getInputStream();
		} catch (IOException e1) {
			e1.printStackTrace();
			if(person!=null){
				System.out.println(Thread.currentThread().getName()+"---"+person.getUserName()+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
				System.out.println("正在删除："+person);
				System.out.println("容器删除前："+ServerListen.list);
				ServerListen.list.remove(person);
				System.out.println("容器删除后："+ServerListen.list);
			}else{
				System.out.println(Thread.currentThread().getName()+"---"+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
			}
			return ;
			//e1.printStackTrace();
		}
		try {
			os=this.socket.getOutputStream();
		} catch (IOException e) {
			e.printStackTrace();
			if(person!=null){
				System.out.println(Thread.currentThread().getName()+"---"+person.getUserName()+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
				System.out.println("正在删除："+person);
				System.out.println("容器删除前："+ServerListen.list);
				ServerListen.list.remove(person);
				System.out.println("容器删除后："+ServerListen.list);
			}else{
				System.out.println(Thread.currentThread().getName()+"---"+" 用户断开！"+"时间是："+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
			}
			return ;
		}
		ChooseOperation co=new ChooseOperation();
		while(true) {
				//输入流
				//接受客户端传过来的person对象
				//读一个对象
				ObjectInputStream ois = null;
				ObjectOutputStream oos=null;
				//ObjectInput
				System.out.println("正在获取对象流！");
				try {
					ois = new ObjectInputStream(is);
					System.out.println("获取对象输入流成功！");
					oos=new ObjectOutputStream(os);
					System.out.println("获取对象输出流成功！");
				} catch (IOException e1) {
					e1.printStackTrace();
					if(person!=null){
						System.out.println(Thread.currentThread().getName()+"---"+person.getUserName()+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
						System.out.println("正在删除："+person);
						System.out.println("容器删除前："+ServerListen.list);
						ServerListen.list.remove(person);
						System.out.println("容器删除后："+ServerListen.list);
					}else{
						System.out.println(Thread.currentThread().getName()+"---"+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
					}
					try {
						ois.close();
						oos.close();
					} catch (IOException ee3) {
						ee3.printStackTrace();
					}catch (NullPointerException eee3) {
						//为空就不表示已经关闭流
					}
					System.out.println("服务器回收资源!");
					return ;
				}
				System.out.println("现在是第"+(i++)+"轮循环！");
				Object object = null;
				date=new Date();
				try {
					System.out.println("读取指令中----");
					object = ois.readObject();
					System.out.println("读取命令成功---"+object);
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
					if(person!=null){
						System.out.println(Thread.currentThread().getName()+"---"+person.getUserName()+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
						System.out.println("正在删除："+person);
						System.out.println("容器删除前："+ServerListen.list);
						ServerListen.list.remove(person);
						System.out.println("容器删除后："+ServerListen.list);
					}else{
						System.out.println(Thread.currentThread().getName()+"---"+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
					}
					try {
						ois.close();
						oos.close();
					} catch (IOException ee2) {
						ee2.printStackTrace();
					}catch (NullPointerException eee2) {
						//为空就不表示已经关闭流
					}
					System.out.println("服务器回收资源!");
					return ;
				}
			
				//输出流	
				//实现根据传过来的方法名,调用相应的方法
				//是否是String类的实例
				if(object instanceof String) {
					String str=(String)object;
					//检测是否需要读第二次
					co.isReader(str);
					boolean flag=co.isFlag();
					try {
						System.out.println("等待读取实体！");
						object = ois.readObject();
						System.out.println("读取实体成功！--"+object);
					} catch (ClassNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
						if(person!=null){
							System.out.println(Thread.currentThread().getName()+"---"+person.getUserName()+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
							System.out.println("正在删除："+person);
							System.out.println("容器删除前："+ServerListen.list);
							ServerListen.list.remove(person);
							System.out.println("容器删除后："+ServerListen.list);
						}else{
							System.out.println(Thread.currentThread().getName()+"---"+" 用户断开！"+"时间是："+"["+(date.getYear()+1900)+"-"+date.getMonth()+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"]");
						}
						try {
							ois.close();
							oos.close();
						} catch (IOException ee) {
							ee.printStackTrace();
						}catch (NullPointerException eee) {
							//为空就不表示已经关闭流
						}
						System.out.println("服务器回收资源!");
						return ;
						
					}
					
					if(flag){
						//是否是Person的实例
						if(object instanceof Person) {
							person=(Person)object;
							co.setPerson(person);
							/*//是否是User类的实例
							if(person instanceof User){
								User user=(User) person;
							}
							//是否是Manager类的实例
							if(person instanceof Manager) {
								Manager manager=(Manager) person;
								
							}*/
						}
						if(object instanceof Book){
							Book book = (Book) object;
							co.setBook(book);
							System.out.println("获取图书----:"+book.toString());
						}
					}
					//调用方法
					co.operation(str,ois,oos);
					System.out.println("调用operation方法成功!");
					//用户退出信息
					person=co.getPerson();
				}
		}
		
	}

}
